# Если в проекте переопределена модель User — начинает накапливаться код, связанный с пользователями: 
# описана кастомная модель, надо создать форму, настроить пути... 
# Для сохранения порядка в проекте имеет смысл создать приложение users и хранить в нём всё, что связано с управлением пользователями:
# - admin.py — файл с настройками админки для модели пользователя;
# - forms.py — наследник формы UserCreationForm;
# - models.py — кастомная модель пользователя;
# - urls.py — подключаемые URL из django.contrib.auth, а также путь для регистрации;
# - views.py — CBV для страницы регистрации пользователя.
# В файле forms.py создаётся собственный класс формы, унаследованный от UserCreationForm. 
# Единственное, зачем нужен этот класс — переопределить модель, с которой работает форма. 
# Для этого в классе CustomUserCreationForm переопределяется атрибут model подкласса Meta: в атрибуте model указывается модель для формы.

# users/forms.py
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth import get_user_model

# Получаем модель пользователя:
User = get_user_model()


class CustomUserCreationForm(UserCreationForm):

    # Наследуем класс Meta от соответствующего класса родительской формы.
    # Так этот класс будет не перезаписан, а расширен.
    class Meta(UserCreationForm.Meta):
        model = User
        # В классе Meta можно переопределить и атрибут fields — список полей, 
        # которые будут выведены в HTML-форму. 
        # Например, если пользователь сразу при регистрации должен заполнить 
        # поле с биографией (поле модели bio), 
        # то это поле должно быть указано в fields:
        # fields = ('username', 'bio')
